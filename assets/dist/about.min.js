class AboutSection { constructor() { this.skillsData = null; this.experienceData = null; this.animationObserver = null; this.init(); } async init() { try { await this.loadData(); this.renderSkills(); this.renderTimeline(); this.setupAnimations(); this.setupProgressAnimations(); } catch (error) { console.error('Error initializing about section:', error); this.showErrorState(); } } async loadData() { try { const response = await fetch('assets/data/skills.json'); if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } const data = await response.json(); this.skillsData = [ data.aiMlEngineering, data.productManagement, data.drugDiscoveryResearch ]; this.experienceData = data.experience; } catch (error) { console.error('Error loading skills data:', error); throw error; } } renderSkills() { const container = document.getElementById('skills-container'); if (!container || !this.skillsData) return; container.innerHTML = ''; const clustersContainer = document.createElement('div'); clustersContainer.className = 'skills-clusters'; clustersContainer.setAttribute('role', 'region'); clustersContainer.setAttribute('aria-label', 'Professional skills organized by expertise area'); this.skillsData.forEach(category => { const clusterElement = this.createSkillCluster(category); clustersContainer.appendChild(clusterElement); }); container.appendChild(clustersContainer); } createSkillCluster(category) { const clusterDiv = document.createElement('div'); const clusterClass = this.getClusterClass(category.category); clusterDiv.className = `skill-cluster ${clusterClass}`; clusterDiv.setAttribute('role', 'region'); clusterDiv.setAttribute('aria-labelledby', `skill-cluster-${clusterClass}`); const header = document.createElement('div'); header.className = 'skill-cluster-header'; const icon = document.createElement('div'); icon.className = 'skill-cluster-icon'; icon.setAttribute('aria-hidden', 'true'); const title = document.createElement('h4'); title.className = 'skill-cluster-title'; title.textContent = category.category; title.id = `skill-cluster-${clusterClass}`; const description = document.createElement('p'); description.className = 'skill-cluster-description'; description.textContent = this.getClusterDescription(category.category); header.appendChild(icon); header.appendChild(title); header.appendChild(description); const skillsList = document.createElement('div'); skillsList.className = 'skill-cluster-skills'; skillsList.setAttribute('role', 'list'); skillsList.setAttribute('aria-label', `${category.category} skills`); category.skills.forEach(skill => { const skillElement = this.createEnhancedSkillItem(skill); skillsList.appendChild(skillElement); }); clusterDiv.appendChild(header); clusterDiv.appendChild(skillsList); return clusterDiv; } getClusterClass(categoryName) { const classMap = { 'AI/ML Engineering': 'ai-ml', 'Product Management': 'product-management', 'Drug Discovery Research': 'drug-discovery' }; return classMap[categoryName] || 'default'; } getClusterDescription(categoryName) { const descriptions = { 'AI/ML Engineering': 'Building intelligent systems and machine learning pipelines for real-world applications', 'Product Management': 'Leading AI product development from strategy to execution with data-driven insights', 'Drug Discovery Research': 'Applying computational methods to accelerate pharmaceutical research and development' }; return descriptions[categoryName] || ''; } createEnhancedSkillItem(skill) { const skillDiv = document.createElement('div'); skillDiv.className = 'skill-item-enhanced'; skillDiv.setAttribute('role', 'listitem'); const skillInfo = document.createElement('div'); skillInfo.className = 'skill-info'; const name = document.createElement('h5'); name.className = 'skill-name'; name.textContent = skill.name; name.id = `skill-${skill.name.toLowerCase().replace(/\s+/g, '-')}`; const experience = document.createElement('span'); experience.className = 'skill-experience'; experience.textContent = `${skill.yearsExperience}y exp`; experience.setAttribute('aria-label', `${skill.yearsExperience} years of experience`); skillInfo.appendChild(name); skillInfo.appendChild(experience); const proficiencyContainer = document.createElement('div'); proficiencyContainer.className = 'skill-proficiency'; proficiencyContainer.setAttribute('role', 'progressbar'); proficiencyContainer.setAttribute('aria-labelledby', name.id); proficiencyContainer.setAttribute('aria-valuenow', skill.proficiency); proficiencyContainer.setAttribute('aria-valuemin', '1'); proficiencyContainer.setAttribute('aria-valuemax', '5'); proficiencyContainer.setAttribute('aria-valuetext', `${this.getProficiencyLabel(skill.proficiency)} level`); for (let i = 1; i <= 5; i++) { const dot = document.createElement('div'); dot.className = `proficiency-dot ${i <= skill.proficiency ? 'filled' : ''}`; dot.setAttribute('aria-hidden', 'true'); proficiencyContainer.appendChild(dot); } const level = document.createElement('span'); level.className = 'skill-level-label'; level.textContent = this.getProficiencyLabel(skill.proficiency); level.setAttribute('aria-hidden', 'true'); skillDiv.appendChild(skillInfo); skillDiv.appendChild(proficiencyContainer); skillDiv.appendChild(level); return skillDiv; } getProficiencyLabel(proficiency) { const labels = { 1: 'Beginner', 2: 'Basic', 3: 'Intermediate', 4: 'Advanced', 5: 'Expert' }; return labels[proficiency] || 'Unknown'; } renderTimeline() { const container = document.getElementById('timeline-container'); if (!container || !this.experienceData) return; const timeline = document.createElement('div'); timeline.className = 'timeline'; timeline.setAttribute('role', 'list'); timeline.setAttribute('aria-label', 'Professional experience timeline'); this.experienceData.forEach((experience, index) => { const timelineItem = this.createTimelineItem(experience, index === 0); timeline.appendChild(timelineItem); }); container.appendChild(timeline); } createTimelineItem(experience, isCurrent = false) { const item = document.createElement('div'); item.className = `timeline-item${isCurrent ? ' current' : ''}`; item.setAttribute('role', 'listitem'); const content = document.createElement('div'); content.className = 'timeline-content'; const header = document.createElement('div'); header.className = 'timeline-header'; const position = document.createElement('h4'); position.className = 'timeline-position'; position.textContent = experience.position; position.id = `position-${experience.company.toLowerCase().replace(/\s+/g, '-')}`; const company = document.createElement('h5'); company.className = 'timeline-company'; company.textContent = experience.company; const duration = document.createElement('span'); duration.className = 'timeline-duration'; duration.textContent = this.formatDateRange(experience.startDate, experience.endDate); duration.setAttribute('aria-label', `Employment duration: ${this.formatDateRange(experience.startDate, experience.endDate)}`); header.appendChild(position); header.appendChild(company); header.appendChild(duration); const description = document.createElement('p'); description.className = 'timeline-description'; description.textContent = experience.description; const achievements = document.createElement('ul'); achievements.className = 'timeline-achievements'; achievements.setAttribute('aria-labelledby', position.id); achievements.setAttribute('aria-label', `Key achievements at ${experience.company}`); experience.achievements.forEach(achievement => { const li = document.createElement('li'); li.textContent = achievement; achievements.appendChild(li); }); content.appendChild(header); content.appendChild(description); content.appendChild(achievements); item.appendChild(content); return item; } formatDateRange(startDate, endDate) { const start = new Date(startDate); const startFormatted = start.toLocaleDateString('en-US', { year: 'numeric', month: 'short' }); if (endDate === 'Present') { return `${startFormatted} - Present`; } const end = new Date(endDate); const endFormatted = end.toLocaleDateString('en-US', { year: 'numeric', month: 'short' }); return `${startFormatted} - ${endFormatted}`; } setupAnimations() { const skillsSection = document.querySelector('.about-skills'); const timelineSection = document.querySelector('.about-timeline'); if (!skillsSection || !timelineSection) return; this.animationObserver = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { entry.target.classList.add('animate'); } }); }, { threshold: 0.1, rootMargin: '0px 0px -50px 0px' }); this.animationObserver.observe(skillsSection); this.animationObserver.observe(timelineSection); } setupProgressAnimations() { const skillClusters = document.querySelectorAll('.skill-cluster'); const clusterObserver = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { const cluster = entry.target; const dots = cluster.querySelectorAll('.proficiency-dot.filled'); dots.forEach((dot, index) => { setTimeout(() => { dot.style.transform = 'scale(1.2)'; setTimeout(() => { dot.style.transform = 'scale(1)'; }, 200); }, index * 100); }); clusterObserver.unobserve(cluster); } }); }, { threshold: 0.3 }); skillClusters.forEach(cluster => { clusterObserver.observe(cluster); }); } showErrorState() { const skillsContainer = document.getElementById('skills-container'); const timelineContainer = document.getElementById('timeline-container'); if (skillsContainer) { skillsContainer.innerHTML = ` <div class="text-center py-8"> <p class="text-gray-500">Unable to load skills data. Please try again later.</p> </div> `; } if (timelineContainer) { timelineContainer.innerHTML = ` <div class="text-center py-8"> <p class="text-gray-500">Unable to load experience data. Please try again later.</p> </div> `; } } async refresh() { try { await this.loadData(); this.renderSkills(); this.renderTimeline(); this.setupProgressAnimations(); } catch (error) { console.error('Error refreshing about section:', error); this.showErrorState(); } } destroy() { if (this.animationObserver) { this.animationObserver.disconnect(); } } } document.addEventListener('DOMContentLoaded', () => { if (document.getElementById('about')) { window.aboutSection = new AboutSection(); } }); if (typeof module !== 'undefined' && module.exports) { module.exports = AboutSection; }