document.addEventListener('DOMContentLoaded', function() { initializeNavigation(); initializeSmoothScrolling(); initializeScrollSpy(); initializeDynamicTyping(); initializeLoadingStates(); initializeMicroInteractions(); initializeCrossBrowserSupport(); }); function initializeNavigation() { const navToggle = document.getElementById('nav-toggle'); const navMenu = document.getElementById('nav-menu'); const navLinks = document.querySelectorAll('.nav-link'); const header = document.querySelector('.header'); if (navToggle && navMenu) { navToggle.addEventListener('click', function() { const isOpen = navMenu.classList.contains('mobile-open'); if (isOpen) { closeNavMenu(); } else { openNavMenu(); } }); } navLinks.forEach(link => { link.addEventListener('click', function() { closeNavMenu(); }); }); document.addEventListener('click', function(event) { const isClickInsideNav = navToggle.contains(event.target) || navMenu.contains(event.target); if (!isClickInsideNav && navMenu.classList.contains('mobile-open')) { closeNavMenu(); } }); document.addEventListener('keydown', function(event) { if (event.key === 'Escape' && navMenu.classList.contains('mobile-open')) { closeNavMenu(); navToggle.focus(); } }); let lastScrollTop = 0; window.addEventListener('scroll', function() { const scrollTop = window.pageYOffset || document.documentElement.scrollTop; if (scrollTop > 50) { header.classList.add('scrolled'); } else { header.classList.remove('scrolled'); } lastScrollTop = scrollTop; }); function openNavMenu() { navMenu.classList.add('mobile-open'); navToggle.classList.add('active'); navToggle.setAttribute('aria-expanded', 'true'); document.body.style.overflow = 'hidden'; const firstNavLink = navMenu.querySelector('.nav-link'); if (firstNavLink) { setTimeout(() => firstNavLink.focus(), 100); } } function closeNavMenu() { navMenu.classList.remove('mobile-open'); navToggle.classList.remove('active'); navToggle.setAttribute('aria-expanded', 'false'); document.body.style.overflow = ''; } } function initializeSmoothScrolling() { const navLinks = document.querySelectorAll('.nav-link[href^="#"]'); navLinks.forEach(link => { link.addEventListener('click', function(event) { event.preventDefault(); const targetId = this.getAttribute('href').substring(1); const targetSection = document.getElementById(targetId); if (targetSection) { const headerHeight = document.querySelector('.header').offsetHeight; const targetPosition = targetSection.offsetTop - headerHeight - 20; window.scrollTo({ top: targetPosition, behavior: 'smooth' }); } }); }); } function initializeScrollSpy() { const sections = document.querySelectorAll('section[id]'); const navLinks = document.querySelectorAll('.nav-link[data-section]'); if (sections.length === 0 || navLinks.length === 0) { return; } let ticking = false; function updateActiveSection() { const scrollPosition = window.pageYOffset + 100; let activeSection = ''; sections.forEach(section => { const sectionTop = section.offsetTop; const sectionHeight = section.offsetHeight; const sectionId = section.getAttribute('id'); if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) { activeSection = sectionId; } }); navLinks.forEach(link => { const linkSection = link.getAttribute('data-section'); if (linkSection === activeSection) { link.classList.add('active'); } else { link.classList.remove('active'); } }); ticking = false; } function requestTick() { if (!ticking) { requestAnimationFrame(updateActiveSection); ticking = true; } } updateActiveSection(); window.addEventListener('scroll', requestTick); } function initializeDynamicTyping() { const dynamicTitle = document.getElementById('dynamic-title'); const cursor = document.querySelector('.hero-cursor'); if (!dynamicTitle) { return; } const titles = [ 'AI/ML Engineer', 'AI Product Manager', 'Researcher', 'Team Leader', 'Strategic Planner', 'Problem Solver', 'Innovation Driver' ]; let currentTitleIndex = 0; let currentCharIndex = 0; let isDeleting = false; let typeSpeed = 100; let deleteSpeed = 50; let pauseTime = 2000; function typeEffect() { const currentTitle = titles[currentTitleIndex]; if (isDeleting) { dynamicTitle.textContent = currentTitle.substring(0, currentCharIndex - 1); currentCharIndex--; if (currentCharIndex === 0) { isDeleting = false; currentTitleIndex = (currentTitleIndex + 1) % titles.length; setTimeout(typeEffect, 500); return; } setTimeout(typeEffect, deleteSpeed); } else { dynamicTitle.textContent = currentTitle.substring(0, currentCharIndex + 1); currentCharIndex++; if (currentCharIndex === currentTitle.length) { isDeleting = true; setTimeout(typeEffect, pauseTime); return; } setTimeout(typeEffect, typeSpeed); } } setTimeout(typeEffect, 1000); if (cursor) { } } function initializeLoadingStates() { document.body.classList.add('page-loading'); window.addEventListener('load', function() { setTimeout(() => { document.body.classList.remove('page-loading'); document.body.classList.add('page-loaded'); }, 100); }); const forms = document.querySelectorAll('form'); forms.forEach(form => { form.addEventListener('submit', function() { const submitButton = form.querySelector('button[type="submit"]'); if (submitButton) { submitButton.classList.add('loading'); submitButton.disabled = true; } }); }); const navLinks = document.querySelectorAll('.nav-link[href^="#"]'); navLinks.forEach(link => { link.addEventListener('click', function() { this.classList.add('navigating'); setTimeout(() => { this.classList.remove('navigating'); }, 800); }); }); } function initializeMicroInteractions() { const buttons = document.querySelectorAll('.btn'); buttons.forEach(button => { button.addEventListener('click', createRippleEffect); }); const cards = document.querySelectorAll('.card, .project-card'); cards.forEach(card => { card.addEventListener('mouseenter', function() { this.style.transform = 'translateY(-4px)'; }); card.addEventListener('mouseleave', function() { this.style.transform = 'translateY(0)'; }); }); const focusableElements = document.querySelectorAll('a, button, input, textarea, select, [tabindex]'); focusableElements.forEach(element => { element.addEventListener('focus', function() { this.classList.add('keyboard-focused'); }); element.addEventListener('blur', function() { this.classList.remove('keyboard-focused'); }); element.addEventListener('mousedown', function() { this.classList.remove('keyboard-focused'); }); }); initializeScrollAnimations(); } function createRippleEffect(event) { const button = event.currentTarget; const ripple = document.createElement('span'); const rect = button.getBoundingClientRect(); const size = Math.max(rect.width, rect.height); const x = event.clientX - rect.left - size / 2; const y = event.clientY - rect.top - size / 2; ripple.style.width = ripple.style.height = size + 'px'; ripple.style.left = x + 'px'; ripple.style.top = y + 'px'; ripple.classList.add('ripple'); button.appendChild(ripple); setTimeout(() => { ripple.remove(); }, 600); } function initializeScrollAnimations() { const observerOptions = { threshold: 0.1, rootMargin: '0px 0px -50px 0px' }; const observer = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { entry.target.classList.add('animate-in'); } }); }, observerOptions); const animateElements = document.querySelectorAll('.project-card, .skill-item, .timeline-item'); animateElements.forEach(element => { element.classList.add('animate-on-scroll'); observer.observe(element); }); } function initializeCrossBrowserSupport() { if (!('scrollBehavior' in document.documentElement.style)) { loadSmoothScrollPolyfill(); } if (!window.IntersectionObserver) { loadIntersectionObserverPolyfill(); } addBrowserClasses(); handleIOSViewportHeight(); addTouchDeviceSupport(); } function loadSmoothScrollPolyfill() { const navLinks = document.querySelectorAll('.nav-link[href^="#"]'); navLinks.forEach(link => { link.addEventListener('click', function(event) { event.preventDefault(); const targetId = this.getAttribute('href').substring(1); const targetElement = document.getElementById(targetId); if (targetElement) { const headerHeight = document.querySelector('.header').offsetHeight; const targetPosition = targetElement.offsetTop - headerHeight - 20; smoothScrollTo(targetPosition, 800); } }); }); } function smoothScrollTo(targetPosition, duration) { const startPosition = window.pageYOffset; const distance = targetPosition - startPosition; let startTime = null; function animation(currentTime) { if (startTime === null) startTime = currentTime; const timeElapsed = currentTime - startTime; const run = easeInOutQuad(timeElapsed, startPosition, distance, duration); window.scrollTo(0, run); if (timeElapsed < duration) requestAnimationFrame(animation); } function easeInOutQuad(t, b, c, d) { t /= d / 2; if (t < 1) return c / 2 * t * t + b; t--; return -c / 2 * (t * (t - 2) - 1) + b; } requestAnimationFrame(animation); } function loadIntersectionObserverPolyfill() { let ticking = false; function checkScrollAnimations() { const animateElements = document.querySelectorAll('.animate-on-scroll:not(.animate-in)'); const windowHeight = window.innerHeight; animateElements.forEach(element => { const elementTop = element.getBoundingClientRect().top; if (elementTop < windowHeight - 50) { element.classList.add('animate-in'); } }); ticking = false; } function requestTick() { if (!ticking) { requestAnimationFrame(checkScrollAnimations); ticking = true; } } window.addEventListener('scroll', requestTick); checkScrollAnimations(); } function addBrowserClasses() { const userAgent = navigator.userAgent; const body = document.body; if (userAgent.includes('Chrome') && !userAgent.includes('Edge')) { body.classList.add('browser-chrome'); } else if (userAgent.includes('Firefox')) { body.classList.add('browser-firefox'); } else if (userAgent.includes('Safari') && !userAgent.includes('Chrome')) { body.classList.add('browser-safari'); } else if (userAgent.includes('Edge')) { body.classList.add('browser-edge'); } if (userAgent.includes('Mac')) { body.classList.add('os-mac'); } else if (userAgent.includes('Windows')) { body.classList.add('os-windows'); } else if (userAgent.includes('Linux')) { body.classList.add('os-linux'); } } function handleIOSViewportHeight() { function setViewportHeight() { const vh = window.innerHeight * 0.01; document.documentElement.style.setProperty('--vh', `${vh}px`); } setViewportHeight(); window.addEventListener('resize', debounce(setViewportHeight, 100)); window.addEventListener('orientationchange', () => { setTimeout(setViewportHeight, 100); }); } function addTouchDeviceSupport() { let isTouch = false; function addTouchClass() { if (!isTouch) { isTouch = true; document.body.classList.add('touch-device'); } } function addMouseClass() { if (isTouch) { isTouch = false; document.body.classList.remove('touch-device'); } } document.addEventListener('touchstart', addTouchClass, { passive: true }); document.addEventListener('mousemove', addMouseClass); if ('ontouchstart' in window || navigator.maxTouchPoints > 0) { addTouchClass(); } } function debounce(func, wait) { let timeout; return function executedFunction(...args) { const later = () => { clearTimeout(timeout); func(...args); }; clearTimeout(timeout); timeout = setTimeout(later, wait); }; }