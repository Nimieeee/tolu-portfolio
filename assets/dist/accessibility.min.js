class AccessibilityTester { constructor() { this.issues = []; this.init(); } init() { if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => this.runTests()); } else { this.runTests(); } } runTests() { console.log('🔍 Running accessibility tests...'); this.checkImages(); this.checkButtons(); this.checkForms(); this.checkHeadings(); this.checkLandmarks(); this.checkKeyboardNavigation(); this.reportResults(); } checkImages() { const images = document.querySelectorAll('img'); images.forEach((img, index) => { if (!img.alt && !img.getAttribute('aria-hidden')) { this.issues.push({ type: 'Missing alt text', element: img, message: `Image ${index + 1} is missing alt text`, severity: 'error' }); } }); } checkButtons() { const buttons = document.querySelectorAll('button'); buttons.forEach((button, index) => { const hasText = button.textContent.trim(); const hasAriaLabel = button.getAttribute('aria-label'); const hasAriaLabelledBy = button.getAttribute('aria-labelledby'); if (!hasText && !hasAriaLabel && !hasAriaLabelledBy) { this.issues.push({ type: 'Button without accessible name', element: button, message: `Button ${index + 1} needs accessible text`, severity: 'error' }); } }); } checkForms() { const inputs = document.querySelectorAll('input, textarea, select'); inputs.forEach((input, index) => { const hasLabel = document.querySelector(`label[for="${input.id}"]`); const hasAriaLabel = input.getAttribute('aria-label'); const hasAriaLabelledBy = input.getAttribute('aria-labelledby'); if (!hasLabel && !hasAriaLabel && !hasAriaLabelledBy) { this.issues.push({ type: 'Form control without label', element: input, message: `Form control ${index + 1} needs a label`, severity: 'error' }); } }); } checkHeadings() { const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6'); let previousLevel = 0; headings.forEach((heading, index) => { const currentLevel = parseInt(heading.tagName.charAt(1)); if (currentLevel > previousLevel + 1) { this.issues.push({ type: 'Heading level skip', element: heading, message: `Heading ${index + 1} skips from h${previousLevel} to h${currentLevel}`, severity: 'warning' }); } previousLevel = currentLevel; }); } checkLandmarks() { const requiredLandmarks = ['main', 'nav', 'header']; requiredLandmarks.forEach(landmark => { const element = document.querySelector(landmark); if (!element) { this.issues.push({ type: 'Missing landmark', element: null, message: `Missing ${landmark} landmark`, severity: 'warning' }); } }); } checkKeyboardNavigation() { const focusableElements = document.querySelectorAll( 'a, button, input, textarea, select, [tabindex]:not([tabindex="-1"])' ); focusableElements.forEach((element, index) => { const computedStyle = window.getComputedStyle(element, ':focus'); if (!computedStyle.outline && !computedStyle.boxShadow) { this.issues.push({ type: 'Poor focus indicator', element: element, message: `Element ${index + 1} may have poor focus visibility`, severity: 'warning' }); } }); } reportResults() { const errors = this.issues.filter(issue => issue.severity === 'error'); const warnings = this.issues.filter(issue => issue.severity === 'warning'); console.log(`✅ Accessibility test complete:`); console.log(` ${errors.length} errors found`); console.log(` ${warnings.length} warnings found`); if (errors.length > 0) { console.group('🚨 Errors:'); errors.forEach(issue => { console.error(issue.message, issue.element); }); console.groupEnd(); } if (warnings.length > 0) { console.group('⚠️ Warnings:'); warnings.forEach(issue => { console.warn(issue.message, issue.element); }); console.groupEnd(); } if (errors.length === 0 && warnings.length === 0) { console.log('🎉 No accessibility issues found!'); } } testKeyboardNavigation() { console.log('🎹 Testing keyboard navigation...'); const focusableElements = Array.from(document.querySelectorAll( 'a, button, input, textarea, select, [tabindex]:not([tabindex="-1"])' )).filter(el => { return el.offsetWidth > 0 && el.offsetHeight > 0 && !el.disabled; }); console.log(`Found ${focusableElements.length} focusable elements`); focusableElements.forEach((element, index) => { const tabIndex = element.tabIndex; console.log(`${index + 1}. ${element.tagName} (tabindex: ${tabIndex})`, element); }); } testScreenReaderAnnouncements() { console.log('📢 Testing screen reader announcements...'); const ariaLiveElements = document.querySelectorAll('[aria-live]'); const ariaLabels = document.querySelectorAll('[aria-label]'); const ariaDescribedBy = document.querySelectorAll('[aria-describedby]'); console.log(`Found ${ariaLiveElements.length} live regions`); console.log(`Found ${ariaLabels.length} elements with aria-label`); console.log(`Found ${ariaDescribedBy.length} elements with aria-describedby`); ariaLiveElements.forEach((element, index) => { console.log(`Live region ${index + 1}:`, { element, politeness: element.getAttribute('aria-live'), atomic: element.getAttribute('aria-atomic') }); }); } simulateScreenReaderNavigation() { console.log('🤖 Simulating screen reader navigation...'); const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6'); const landmarks = document.querySelectorAll('main, nav, header, footer, aside, section[aria-label], section[aria-labelledby]'); const links = document.querySelectorAll('a[href]'); const buttons = document.querySelectorAll('button'); console.log('Heading structure:'); headings.forEach((heading, index) => { console.log(` ${heading.tagName}: ${heading.textContent.trim()}`); }); console.log('Landmarks:'); landmarks.forEach((landmark, index) => { const label = landmark.getAttribute('aria-label') || landmark.getAttribute('aria-labelledby') || landmark.tagName.toLowerCase(); console.log(` ${landmark.tagName}: ${label}`); }); console.log(`Found ${links.length} links and ${buttons.length} buttons`); } } if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') { window.accessibilityTester = new AccessibilityTester(); document.addEventListener('keydown', (e) => { if (e.ctrlKey && e.altKey && e.key === 'a') { e.preventDefault(); window.accessibilityTester.runTests(); } if (e.ctrlKey && e.altKey && e.key === 'k') { e.preventDefault(); window.accessibilityTester.testKeyboardNavigation(); } if (e.ctrlKey && e.altKey && e.key === 's') { e.preventDefault(); window.accessibilityTester.testScreenReaderAnnouncements(); } if (e.ctrlKey && e.altKey && e.key === 'n') { e.preventDefault(); window.accessibilityTester.simulateScreenReaderNavigation(); } }); console.log('🔧 Accessibility testing enabled. Use these shortcuts:'); console.log(' Ctrl+Alt+A: Run accessibility tests'); console.log(' Ctrl+Alt+K: Test keyboard navigation'); console.log(' Ctrl+Alt+S: Test screen reader announcements'); console.log(' Ctrl+Alt+N: Simulate screen reader navigation'); } if (typeof module !== 'undefined' && module.exports) { module.exports = AccessibilityTester; }