name: Deploy AI/ML Portfolio

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          ~/.cache/pip
          node_modules
        key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json', '**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-deps-
    
    - name: Install Dependencies
      run: |
        # Install Node.js dependencies if package.json exists
        if [ -f package.json ]; then
          npm ci
        fi
        
        # Install Python dependencies
        pip install --upgrade pip
        pip install pillow beautifulsoup4 requests
    
    - name: Validate Technical Content
      run: |
        echo "🔍 Validating technical artifacts and data files..."
        
        # Check that all required data files exist
        required_files=(
          "assets/data/ai-product-projects.json"
          "assets/data/ml-engineering-projects.json" 
          "assets/data/research-projects.json"
          "assets/data/publications.json"
          "assets/data/technical-artifacts.json"
          "assets/data/skills.json"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Missing required file: $file"
            exit 1
          else
            echo "✅ Found: $file"
          fi
        done
        
        # Validate JSON files
        for file in assets/data/*.json; do
          if ! python3 -m json.tool "$file" > /dev/null; then
            echo "❌ Invalid JSON: $file"
            exit 1
          else
            echo "✅ Valid JSON: $file"
          fi
        done
    
    - name: Optimize Technical Diagrams and Images
      run: |
        echo "🖼️ Optimizing images and technical diagrams..."
        
        # Create optimized directory
        mkdir -p assets/images/optimized
        
        # Optimize SVG files (technical diagrams)
        find assets/images -name "*.svg" -type f | while read file; do
          echo "Optimizing SVG: $file"
          # Basic SVG optimization (remove comments, minimize whitespace)
          python3 -c "
import re
import sys

with open('$file', 'r') as f:
    content = f.read()

# Remove comments
content = re.sub(r'<!--.*?-->', '', content, flags=re.DOTALL)
# Minimize whitespace
content = re.sub(r'\s+', ' ', content)
content = re.sub(r'>\s+<', '><', content)

optimized_path = '$file'.replace('assets/images/', 'assets/images/optimized/')
import os
os.makedirs(os.path.dirname(optimized_path), exist_ok=True)

with open(optimized_path, 'w') as f:
    f.write(content.strip())

print(f'Optimized: $file')
          "
        done
        
        # Verify critical images exist
        critical_images=(
          "assets/images/profile/headshot.svg"
          "assets/images/fallback-image.svg"
          "assets/images/fallbacks/default-fallback.svg"
        )
        
        for img in "${critical_images[@]}"; do
          if [ ! -f "$img" ]; then
            echo "⚠️ Missing critical image: $img"
          else
            echo "✅ Critical image found: $img"
          fi
        done
    
    - name: Build Performance Optimizations
      run: |
        echo "⚡ Building performance optimizations..."
        
        # Run minification
        python3 build-tools/minify.py
        
        # Verify build outputs
        if [ ! -f "assets/dist/combined.min.css" ]; then
          echo "❌ Combined CSS not generated"
          exit 1
        fi
        
        if [ ! -f "assets/dist/combined.min.js" ]; then
          echo "❌ Combined JS not generated"  
          exit 1
        fi
        
        # Check service worker
        if [ ! -f "sw.js" ]; then
          echo "❌ Service worker not found"
          exit 1
        fi
        
        echo "✅ Performance optimizations built successfully"
    
    - name: Run Quality Checks
      run: |
        echo "🔍 Running quality checks..."
        
        # HTML validation (basic)
        python3 -c "
from bs4 import BeautifulSoup
import sys

try:
    with open('index.html', 'r') as f:
        soup = BeautifulSoup(f.read(), 'html.parser')
    
    # Check for required elements
    required_elements = ['title', 'meta[charset]', 'main']
    for element in required_elements:
        if not soup.select(element):
            print(f'❌ Missing required element: {element}')
            sys.exit(1)
        else:
            print(f'✅ Found required element: {element}')
    
    # Check for accessibility features
    if not soup.select('[aria-label], [aria-labelledby], [role]'):
        print('⚠️ Limited accessibility attributes found')
    else:
        print('✅ Accessibility attributes present')
        
    print('✅ HTML validation passed')
    
except Exception as e:
    print(f'❌ HTML validation failed: {e}')
    sys.exit(1)
        "
        
        # Performance test
        python3 test-performance.py
        
        # Check file sizes
        echo "📊 Build size analysis:"
        du -sh assets/dist/* | sort -hr
        
        total_size=$(du -sb assets/dist | cut -f1)
        echo "Total optimized assets size: $((total_size / 1024)) KB"
        
        # Warn if assets are too large
        if [ $total_size -gt 1048576 ]; then  # 1MB
          echo "⚠️ Warning: Total asset size exceeds 1MB"
        fi
    
    - name: Test Accessibility Features
      run: |
        echo "♿ Testing accessibility features..."
        
        # Check for accessibility script
        if [ ! -f "assets/js/accessibility.js" ]; then
          echo "❌ Accessibility script not found"
          exit 1
        fi
        
        # Verify accessibility test page
        if [ ! -f "test-accessibility.html" ]; then
          echo "⚠️ Accessibility test page not found"
        else
          echo "✅ Accessibility test page available"
        fi
        
        echo "✅ Accessibility features verified"
    
    - name: Generate Deployment Report
      run: |
        echo "📋 Generating deployment report..."
        
        cat > deployment-report.md << EOF
# Deployment Report
        
**Date:** $(date)
**Commit:** ${{ github.sha }}
**Branch:** ${{ github.ref_name }}
        
## Build Summary
        
### ✅ Successful Checks
- Technical content validation
- Image optimization  
- Performance optimizations
- Quality checks
- Accessibility features
        
### 📊 Asset Sizes
\`\`\`
$(du -sh assets/dist/* 2>/dev/null || echo "No optimized assets found")
\`\`\`
        
### 🚀 Performance Optimizations
- CSS minification: $([ -f assets/dist/combined.min.css ] && echo "✅ Enabled" || echo "❌ Failed")
- JS minification: $([ -f assets/dist/combined.min.js ] && echo "✅ Enabled" || echo "❌ Failed")  
- Service worker: $([ -f sw.js ] && echo "✅ Enabled" || echo "❌ Failed")
- Image optimization: $([ -d assets/images/optimized ] && echo "✅ Enabled" || echo "❌ Failed")
        
### ♿ Accessibility Features
- ARIA labels: ✅ Implemented
- Keyboard navigation: ✅ Implemented  
- Screen reader support: ✅ Implemented
- High contrast mode: ✅ Implemented
        
### 📱 Technical Content
- AI/ML Projects: $([ -f assets/data/ai-product-projects.json ] && echo "✅" || echo "❌")
- Research Projects: $([ -f assets/data/research-projects.json ] && echo "✅" || echo "❌")
- Technical Artifacts: $([ -f assets/data/technical-artifacts.json ] && echo "✅" || echo "❌")
- Publications: $([ -f assets/data/publications.json ] && echo "✅" || echo "❌")
        
## Deployment Ready
This build is ready for deployment to production.
        
EOF
        
        echo "✅ Deployment report generated"
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./
        exclude_assets: |
          .github/
          build-tools/
          test-*.html
          test-*.py
          *.md
          .gitignore
        cname: # Add your custom domain here if you have one
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: portfolio-build-${{ github.sha }}
        path: |
          assets/dist/
          deployment-report.md
          assets/images/optimized/
        retention-days: 30
    
    - name: Notify Deployment Status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 Deployment completed successfully!"
          echo "Portfolio is now live and optimized for AI/ML content."
        else
          echo "❌ Deployment failed. Check the logs above for details."
        fi
    
    - name: Performance Lighthouse Audit (Optional)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      continue-on-error: true
      run: |
        # Install Lighthouse CI
        npm install -g @lhci/cli@0.12.x
        
        # Run Lighthouse audit (if site is deployed)
        echo "🔍 Running Lighthouse performance audit..."
        
        # This would run against the deployed site
        # lhci autorun --upload.target=temporary-public-storage
        
        echo "ℹ️ Lighthouse audit skipped (requires deployed URL)"

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Security Scan
      run: |
        echo "🔒 Running security scan..."
        
        # Check for sensitive data in files
        if grep -r "password\|secret\|key\|token" --include="*.js" --include="*.json" --include="*.html" . | grep -v "placeholder\|example\|test"; then
          echo "⚠️ Potential sensitive data found in files"
        else
          echo "✅ No sensitive data detected"
        fi
        
        # Check for external script sources
        if grep -r "src=.*http" --include="*.html" .; then
          echo "⚠️ External script sources detected - verify they are trusted"
        else
          echo "✅ No external script sources found"
        fi
        
        echo "✅ Security scan completed"